# .github/workflows/build-ffmpeg-kit.yml

# Name for this GitHub Actions workflow.
name: Build Full FFmpeg-Kit for Android

# Controls when the action will run.
on:
  # Triggers the workflow on push events to the "main" or "master" branch.
  push:
    branches: [ "main", "master" ]
    
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

jobs:
  build-android:
    # The type of virtual machine that the job will run on.
    runs-on: ubuntu-latest

    steps:
      # 1. Checks out your repository code so the job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Install the complete list of system-level build dependencies.
      #    This list is based on a successful local WSL environment to ensure
      #    all external libraries can be compiled successfully.
      - name: Install Build Dependencies
        run: |
          sudo apt-get update -qq && sudo apt-get -y install \
            asciidoc \
            autoconf \
            autogen \
            automake \
            build-essential \
            cmake \
            curl \
            dblatex \
            docbook-to-man \
            docbook-utils \
            docbook-xsl \
            docbook2x \
            doxygen \
            gettext \
            git-core \
            gperf \
            groff \
            gnulib \
            gtk-doc-tools \
            intltool-debian \
            libaom-dev \
            libasound2-dev \
            libass-dev \
            libbz2-dev \
            libclang-common-18-dev \
            libcurl4-gnutls-dev \
            libdav1d-dev \
            libdbus-1-dev \
            libdecor-0-dev \
            libdrm-dev \
            libegl-dev \
            libexpat1-dev \
            libffi-dev \
            libfontconfig-dev \
            libfreetype6-dev \
            libfribidi-dev \
            libgbm-dev \
            libgl-dev \
            libgles-dev \
            libglib2.0-dev \
            libglx-dev \
            libgmp-dev \
            libgnutls28-dev \
            libgraphite2-dev \
            libharfbuzz-dev \
            libibus-1.0-dev \
            libice-dev \
            libicu-dev \
            libidn2-dev \
            libjpeg-dev \
            libltdl-dev \
            libmount-dev \
            libmp3lame-dev \
            libncurses-dev \
            libobjc-13-dev \
            libogg-dev \
            libopts25-dev \
            libopus-dev \
            libp11-kit-dev \
            libpciaccess-dev \
            libpcre2-dev \
            libpng-dev \
            libpthread-stubs0-dev \
            libpulse-dev \
            libsamplerate0-dev \
            libsdl2-dev \
            libselinux1-dev \
            libsepol-dev \
            libsharpyuv-dev \
            libsm-dev \
            libsndio-dev \
            libsoxr-dev \
            libssl-dev \
            libstdc++-13-dev \
            libtasn1-6-dev \
            libtool \
            libudev-dev \
            libunibreak-dev \
            libunistring-dev \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libvpx-dev \
            libwayland-dev \
            libwebp-dev \
            libx11-dev \
            libxau-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            libxcb1-dev \
            libxcursor-dev \
            libxdmcp-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxinerama-dev \
            libxkbcommon-dev \
            libxml2-dev \
            libxrandr-dev \
            libxrender-dev \
            libxss-dev \
            libxt-dev \
            libxv-dev \
            libxxf86vm-dev \
            llvm-18-dev \
            meson \
            nasm \
            ninja-build \
            openjdk-17-jdk \
            pkg-config \
            texinfo \
            uuid-dev \
            wget \
            x11proto-dev \
            xsltproc \
            xtrans-dev \
            yasm \
            zlib1g-dev \
            zlib1g-dev

      # 3. Set up JDK 17, which is required for modern Android Gradle Plugin versions.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # 4. Set up the Android SDK and NDK environment properly.
      #    This action correctly sets ANDROID_HOME and ANDROID_NDK_ROOT.
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          # Using the NDK version that works on the local WSL setup.
          packages: 'ndk;25.2.9519653'

      # 5. Cache Gradle files to speed up subsequent builds.
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 6. Cache the downloaded source tarballs to avoid re-downloading them on every run.
      - name: Cache FFmpeg Source Dependencies
        uses: actions/cache@v4
        with:
          path: src # The 'src' directory where sources are downloaded
          key: ${{ runner.os }}-ffmpeg-sources-${{ hashFiles('**/tools/download-sources.sh') }}

      # 7. Run the main build command.
      - name: Build Full FFmpeg-Kit for Android
        # We add 'continue-on-error: true' so that the next step (uploading the log) will run even if this step fails.
        continue-on-error: true
        run: |
          echo "Starting FFmpeg-Kit build..."
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          # Make the build script executable
          chmod +x android.sh
          # Execute the script with the --full flag
          ./android.sh --full

      # 8. Upload the build.log file for debugging.
      #    This step will run even if the build step above fails.
      - name: Upload Build Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log

      # 9. Upload the entire 'prebuilt/android-aar' directory if the build was successful.
      - name: Upload AAR Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-full-android-aars
          path: prebuilt/android-aar/
